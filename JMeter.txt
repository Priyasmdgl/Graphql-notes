Performance testing:
-------------------
It is a non functional testing. Testing the performance of an application under heavy loads
i.e, load,stress,volume testing
simulates multiple users sending request to target server and returns the performance result of the target
We can measure speed,scalability and stability of the application

Types of performance testing:
Load testing-checks the performance of the app under anticipated user load.
obj-identify performance bottleneck before the app goes live
stress testing-testing the app under extreme workload and checks whether the server can handle it
obj-identify the breaking point of the application
endurance testing-to test that the app can handle the load over a long period of time
spike testing-test the software reaction to sudden large spikes in the load generated by the users
volume testing-by applying large volume of data

Common performance bottlenecks:
cpu,memory,network,operating system,disk utilization

Test plan:
series of steps that jmeter is going to execute when the run button is pressed
It may consist of thread groups,logic controllers,sample generating controllers,listeners,timers,assertions and configuration elements

stop-immediately shutdown everything
shutdown-shutdown after the ongoing process is done

Thread group:
entry point of test plan
thread represents the no.of users who hit the server
contains no.of threads(users),ramp up period,loop count,delay,scheduler
logical controllers and samplers should be only under thread group not under test plan
threads-no.of users
ramp up period-within that specific time that mentioned users should be able to access the app
loop count-no.of times to execute the test
under thread group we can create samplers,controllers,listeners,configuration elements,assertions,timers,processors

Samplers:
different types of request
tells jmeter to send requests to a server and wait for a response

Listeners:
represents the result of test execution.It can be diff formats like graph,tree,table,log
when jmeter runs the test case,we will receive some response as a part of it
that response can be accessed by using listener

Configuration elements:
to set up variables for later use by sampler
e.g csv data set config-for data driven testing

Timers:
Timer can be added in a test plan to set delay between each sampler or request

Logical controllers:
let you handle the order of processing our request in a thread
means which will decide when and how to send a request to a server
simple controller-used to group request
only once controller-used to run the request only once


Reports:
Average: sum of total req/total no.of req
Median:middle number
Latency:if the total time to hit the entire request is 500ms
latency is the time,when we get the very first response byte from the server
connect time:time taken to establish the connection with the server
throughput:no.of transactions per second

Assertions:
we can add test cases to the request

CSV file insertion:
click on add-config element-csv data set config-browse and add that file
then declare the header given in the csv file as a variable in parameter section of the request as q=${}

Monitor server health using jmeter:
For this we need a server machine,performance monitoring agent,performance plugin on jmeter
for client and server communication:
server agent should be downloaded on the machine where the application is hosted
server agent download-https://github.com/undera/perfmon-agent/blob/master/README.md
and then run start agent which runs in default port 4444
For monitoring performance of the server:
Plugin download- https://jmeter-plugins.org/wiki/PerfMon/
https://jmeter-plugins.org/wiki/PluginsManager/
save it in lib-ext and restart jmeter, then install perfmon plugin under options section and restart jmeter
now create a thread group and add lister-perfmon metrics collector
then add whichever performance you need to monitor and run the thread group

Load testing in non gui mode:
create a thread group and save it in bin folder and open the cmd prompt from the bin folder of jmeter and run the below cmd
jmeter -n -t (saved file name) -l (result file name(any))
we can see the reports generated in bin folder under the given result file name in above cmd 

Report generation:
To create report from existing CSV report: jmeter -g testresults.csv -o C:\Users\HP\Downloads\jmeter report\
To create the report while testing:  jmeter -n -t  test.jmx -l testresults.csv -e -o C:\Users\HP\Downloads\jmeter report\

SMTP server details:
Gmail:
• SMTP server address: smtp.gmail.com
• SMTP username:   Your Gmail email address (eg: user1@gmail.com)
• SMTP password: Your Gmail password
• SMTP port : SSL – 465 , TLS - 587
Outlook:
• SMTP server address: smtp-mail.outlook.com
• SMTP username:   Your Outkook email address((eg: user2@outlook.com)
• SMTP password: Your Outlook password
• SMTP port : 587

Database performance testing in jmeter:
For this we need a database,server name,port number,username&pwd
paste the database connector jar file into the lib folder of jmeter and restart it
1.make connection with the database
add-config element-JDBC connection configuration
in that add the following:
database url: jdbc:mysql://servername:portnumber/schemaname
select the jdbc driver class according to the db which you use
give the username and pwd
give the variable name for pool
2.write sql query
add a jdbc sampler request
give the variable name
write the query and run it


Common performance problems faced by the users are longer loading and poor response time,poor scalability

Jmeter:
open source performance testing tool to analyse the performance of the server under heavy load
it is a java application and used for diff requests like http,ftp,tcp,smtp protocol,api and database




